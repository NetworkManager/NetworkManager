<?xml version="1.0" encoding="UTF-8"?>
<node name="/org/freedesktop/NetworkManager/Settings">

  <!--
      org.freedesktop.NetworkManager.Settings:
      @short_description: Connection Settings Profile Manager.

      The Settings interface allows clients to view and administrate the
      connections stored and used by NetworkManager.
  -->
  <interface name="org.freedesktop.NetworkManager.Settings">

    <!--
        ListConnections:
        @connections: List of connections.

        List the saved network connections known to NetworkManager.
    -->
    <method name="ListConnections">
      <arg name="connections" type="ao" direction="out"/>
    </method>

    <!--
        GetConnectionByUuid:
        @uuid: The UUID to find the connection object path for.
        @connection: The connection's object path.

        Retrieve the object path of a connection, given that connection's UUID.
    -->
    <method name="GetConnectionByUuid">
      <arg name="uuid" type="s" direction="in"/>
      <arg name="connection" type="o" direction="out"/>
    </method>

    <!--
        AddConnection:
        @connection: Connection settings and properties.
        @path: Object path of the new connection that was just added.

        Add new connection and save it to disk. This operation does not start the
        network connection unless (1) device is idle and able to connect to the
        network described by the new connection, and (2) the connection is allowed
        to be started automatically.
    -->
    <method name="AddConnection">
      <arg name="connection" type="a{sa{sv}}" direction="in"/>
      <arg name="path" type="o" direction="out"/>
    </method>

    <!--
        AddConnectionUnsaved:
        @connection: Connection settings and properties.
        @path: Object path of the new connection that was just added.

        Add new connection but do not save it to disk immediately. This operation
        does not start the network connection unless (1) device is idle and able
        to connect to the network described by the new connection, and (2) the
        connection is allowed to be started automatically. Use the 'Save' method
        on the connection to save these changes to disk.
    -->
    <method name="AddConnectionUnsaved">
      <arg name="connection" type="a{sa{sv}}" direction="in"/>
      <arg name="path" type="o" direction="out"/>
    </method>

    <!--
        AddConnection2:
        @settings: New connection settings, properties, and (optionally) secrets.
        @flags: Flags. Unknown flags cause the call to fail.
        @args: Optional arguments dictionary, for extentibility. Specifying unknown keys causes the call to fail.
        @path: Object path of the new connection that was just added.
        @result: Output argument, currently no additional results are returned.
        @since: 1.20

        Add a new connection profile.

        AddConnection2 is an alternative to
        <link linkend="gdbus-method-org-freedesktop-NetworkManager-Settings.AddConnection">AddConnection</link> and
        <link linkend="gdbus-method-org-freedesktop-NetworkManager-Settings.AddConnectionUnsaved">AddConnectionUnsaved</link>.
        The new variant can do everything that the older variants could, and more.
        Its behavior is extensible via extra %flags and %args arguments.

        The %flags argument accepts the combination of following values,
        logically or-ed together:

        <variablelist>
        <varlistentry>
          <term><literal>0x1 (to-disk)</literal>:</term>
          <listitem><para>The connection is persisted to disk.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>0x2 (in-memory)</literal>:</term>
          <listitem><para>The change is only made in memory (without touching an eventual
          profile on disk). If neither 0x1 nor 0x2 is set, the change is made in memory
          only, if the connection is already in memory only.</para></listitem>
        </varlistentry>
        <varlistentry>
          <term><literal>0x20 (block-autoconnect)</literal>:</term>
          <listitem><para>Blocks auto-connect on the new profile</para></listitem>
        </varlistentry>
        </variablelist>

        The %args argument accepts the following keys:

        <variablelist>
        <varlistentry>
          <term><literal>plugin</literal>:</term>
          <listitem><para>The settings plugin the newly added connection will
          use, such as "keyfile" or "ifcfg-rh".</para>
          <para role="since">Since 1.38</para></listitem>
        </varlistentry>
        </variablelist>

        Either the flags 0x1 (to-disk) or 0x2 (in-memory) must be specified.
        The effect is whether to behave like
        <link linkend="gdbus-method-org-freedesktop-NetworkManager-Settings.AddConnection">AddConnection</link> or
        <link linkend="gdbus-method-org-freedesktop-NetworkManager-Settings.AddConnectionUnsaved">AddConnectionUnsaved</link>.
    -->
    <method name="AddConnection2">
      <arg name="settings" type="a{sa{sv}}" direction="in"/>
      <arg name="flags" type="u" direction="in"/>
      <arg name="args" type="a{sv}" direction="in"/>
      <arg name="path" type="o" direction="out"/>
      <arg name="result" type="a{sv}" direction="out"/>
    </method>

    <!--
        LoadConnections:
        @filenames: Array of paths to on-disk connection profiles in directories monitored by NetworkManager.
        @status: Success or failure of the operation as a whole. True if NetworkManager at least tried to load the indicated connections, even if it did not succeed. False if an error occurred before trying to load the connections (eg, permission denied).
        @failures: Paths of connection files that could not be loaded.

        Loads or reloads the indicated connections from disk. You should call this
        after making changes directly to an on-disk connection file to make sure
        that NetworkManager sees the changes.
        As with AddConnection(), this operation does not necessarily
        start the network connection.

        Note that before 1.20, NetworkManager had a bug and this @status value was wrong.
        It is better to assume success if the method does not return with a D-Bus error.
        On top of that, you can look at @failures to know whether any of the requested files failed.
    -->
    <method name="LoadConnections">
      <arg name="filenames" type="as" direction="in"/>
      <arg name="status" type="b" direction="out"/>
      <arg name="failures" type="as" direction="out"/>
    </method>

    <!--
        ReloadConnections:
        @status: This always returns %TRUE.

        Tells NetworkManager to reload all connection files from disk, including
        noticing any added or deleted connection files.
    -->
    <method name="ReloadConnections">
      <arg name="status" type="b" direction="out"/>
    </method>

    <!--
        SaveHostname:
        @hostname: The hostname to save to persistent configuration. If blank, the persistent hostname is cleared.

        Save the hostname to persistent configuration.
    -->
    <method name="SaveHostname">
      <arg name="hostname" type="s" direction="in"/>
    </method>

    <!--
        Connections:

        List of object paths of available network connection profiles.
    -->
    <property name="Connections" type="ao" access="read"/>

    <!--
        Hostname:

        The machine hostname stored in persistent configuration.
    -->
    <property name="Hostname" type="s" access="read"/>

    <!--
        CanModify:

        If true, adding and modifying connections is supported.
    -->
    <property name="CanModify" type="b" access="read"/>

    <!--
        NewConnection:
        @connection: Object path of the new connection.

        Emitted when a new connection has been added after NetworkManager has
        started up and initialized. This signal is not emitted for connections
        read while starting up, because NetworkManager's D-Bus service is only
        available after all connections have been read, and to prevent spamming
        listeners with too many signals at one time. To retrieve the initial
        connection list, call the ListConnections() method once, and then listen
        for individual Settings.NewConnection and Settings.Connection.Deleted
        signals for further updates.
    -->
    <signal name="NewConnection">
      <arg name="connection" type="o"/>
    </signal>

    <!--
        ConnectionRemoved:
        @connection: Object path of the removed connection.

        Emitted when a connection is no longer available. This happens when the
        connection is deleted or if it is no longer accessible by any of the
        system's logged-in users. After receipt of this signal, the connection no
        longer exists and cannot be used. Also see the Settings.Connection.Removed
        signal.
    -->
    <signal name="ConnectionRemoved">
      <arg name="connection" type="o"/>
    </signal>

  </interface>
</node>
