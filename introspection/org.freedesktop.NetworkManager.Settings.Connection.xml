<?xml version="1.0" encoding="UTF-8"?>
<node name="/">

  <!--
      org.freedesktop.NetworkManager.Settings.Connection:
      @short_description: Connection Settings Profile

      Represents a single network connection configuration.
  -->
  <interface name="org.freedesktop.NetworkManager.Settings.Connection">

    <!--
        Update:
        @properties: New connection settings, properties, and (optionally) secrets.

        Update the connection with new settings and properties (replacing all
        previous settings and properties) and save the connection to disk. Secrets
        may be part of the update request, and will be either stored in persistent
        storage or sent to a Secret Agent for storage, depending on the flags
        associated with each secret.
    -->
    <method name="Update">
      <arg name="properties" type="a{sa{sv}}" direction="in"/>
    </method>

    <!--
        UpdateUnsaved:
        @properties: New connection settings, properties, and (optionally) secrets.

        Update the connection with new settings and properties (replacing all
        previous settings and properties) but do not immediately save the
        connection to disk. Secrets may be part of the update request and may sent
        to a Secret Agent for storage, depending on the flags associated with each
        secret. Use the 'Save' method to save these changes to disk. Note that
        unsaved changes will be lost if the connection is reloaded from disk
        (either automatically on file change or due to an explicit
        ReloadConnections call).
    -->
    <method name="UpdateUnsaved">
      <arg name="properties" type="a{sa{sv}}" direction="in"/>
    </method>

    <!--
        Delete:

        Delete the connection.
    -->
    <method name="Delete"/>

    <!--
        GetSettings:
        @settings: The nested settings maps describing this object.

        Get the settings maps describing this network configuration. This will
        never include any secrets required for connection to the network, as those
        are often protected. Secrets must be requested separately using the
        GetSecrets() call.
    -->
    <method name="GetSettings">
      <arg name="settings" type="a{sa{sv}}" direction="out"/>
    </method>

    <!--
        GetSecrets:
        @setting_name: Name of the setting to return secrets for. If empty, all all secrets will be returned.
        @secrets: Nested settings maps containing secrets.

        Get the secrets belonging to this network configuration. Only secrets from
        persistent storage or a Secret Agent running in the requestor's session
        will be returned. The user will never be prompted for secrets as a result
        of this request.
    -->
    <method name="GetSecrets">
      <arg name="setting_name" type="s" direction="in"/>

      <arg name="secrets" type="a{sa{sv}}" direction="out"/>
    </method>

    <!--
        ClearSecrets:

        Clear the secrets belonging to this network connection profile.
    -->
    <method name="ClearSecrets"/>

    <!--
        Save:

        Saves a "dirty" connection (that had previously been updated with
        UpdateUnsaved) to persistent storage.
    -->
    <method name="Save"/>

    <!--
        Updated:

        Emitted when any settings or permissions change. When handling this
        signal, clients should re-read the connection using the GetSettings method
        to get the changes and to ensure the client still has permission to access
        the connection.
    -->
    <signal name="Updated"/>

    <!--
        Update2:
        @settings: New connection settings, properties, and (optionally) secrets.
          Provide an empty array, to use the current settings.
        @flags: optional flags argument. Currently supported flags are:
          "0x1" (to-disk),
          "0x2" (in-memory),
          "0x4" (in-memory-detached),
          "0x8" (in-memory-only),
          "0x10" (volatile),
          "0x20" (block-autoconnect).
          Unknown flags cause the call to fail.
        @args: optional arguments dictionary, for extensibility. Currently no
          arguments are accepted. Specifying unknown keys causes the call
          to fail.
        @result: output argument, currently no results are returned.

        Update the connection with new settings and properties (replacing all
        previous settings and properties). If the flag 0x1 is present,
        the connection is persisted to disk. If the flag 0x2 is present,
        the change is only made in memory (without touching an eventual
        profile on disk). If neither 0x1 nor 0x2 is set, the change is made
        in memory only, if the connection is already in memory only.
        Secrets may be part of the update request, and will be either stored in persistent
        storage or sent to a Secret Agent for storage, depending on the flags
        associated with each secret.

        Update2 is a extensible alternative to Update, UpdateUnsaved and Save.

        Since: 1.12
    -->
    <method name="Update2">
      <arg name="settings" type="a{sa{sv}}" direction="in"/>
      <arg name="flags" type="u" direction="in"/>
      <arg name="args" type="a{sv}" direction="in"/>
      <arg name="result" type="a{sv}" direction="out"/>
    </method>

    <!--
        Removed:

        Emitted when this connection is no longer available. This happens when the
        connection is deleted or if it is no longer accessible by any of the
        system's logged-in users. After receipt of this signal, the object no
        longer exists. Also see the Settings.ConnectionRemoved signal.
    -->
    <signal name="Removed"/>

    <!--
        Unsaved:

        If set, indicates that the in-memory state of the connection does not
        match the on-disk state. This flag will be set when UpdateUnsaved() is
        called or when any connection details change, and cleared when the
        connection is saved to disk via Save() or from internal operations.
    -->
    <property name="Unsaved" type="b" access="read"/>

    <!--
        Flags:

        Additional flags of the connection profile.

        Returns: <link linkend="NMSettingsConnectionFlags">NMSettingsConnectionFlags</link>

        Since: 1.12
    -->
    <property name="Flags" type="u" access="read"/>

    <!--
        Filename:

        File that stores the connection in case the connection is file-backed.

        Since: 1.12
    -->
    <property name="Filename" type="s" access="read"/>

    <!--
        PropertiesChanged:
        @properties: A dictionary mapping property names to variant boxed values.

        DEPRECATED. Use the standard "PropertiesChanged" signal from "org.freedesktop.DBus.Properties" instead which exists since version NetworkManager 1.2.0.
    -->
    <signal name="PropertiesChanged">
      <arg name="properties" type="a{sv}"/>
    </signal>
  </interface>
</node>
